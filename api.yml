openapi: 3.0.0

info:
  title: Pet Shop Example API
  version: "1.0"
  description: Simple example API

servers:
  - url: /api

paths:
  /auth/login:
    post:
      summary: Login as a employee or customer
      tags:
        - Authentication
      operationId: app.auth
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
              example:
                username: soa-admin
                password: 27654231c1605128c22ed5776a39f7a2a13d8a127e8d96725eb72b568f340113
        description: authentication with username and password and get jwt token
      responses:
        "200":
          description: Returns jwt token
        "401":
          description: Bad auth
  /auth/logout:
    post:
      summary: Disable refresh token
      security:
        - jwt: [ ]
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      operationId: app.logout
      responses:
        "200":
          description: Logout
        "401":
          description: Bad request
  /auth/token/info:
    get:
      summary: Get a decrypted token of the current logged in user
      security:
        - jwt: [ ]
      tags:
        - Authentication
      operationId: app.token_info
      responses:
        "200":
          description: Token info
        "401":
          description: Bad request
  /auth/token/valid:
    get:
      summary: check if user info token is valid
      security:
        - jwt: [ ]
      tags:
        - Authentication
      operationId: app.check_token_validity
      responses:
        "200":
          description: Is token valid
        "401":
          description: Bad request
  /auth/token/refresh:
    post:
      summary: Refresh a token
      tags:
        - Authentication
      operationId: app.refresh_token
      requestBody:
        content:
          application/json:
            schema:
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        "200":
          description: Refresh token
        "401":
          description: Bad request


  /user/register/customer:
    post:
      summary: Register user as customer
      tags:
        - User
      operationId: app.register_customer
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
        description: Register customer and get token
      responses:
        "200":
          description: Return jwt token
        "401":
          description: Bad auth
  /user/register/employee:
    post:
      summary: Register a user as an employee
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.register_employee
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
                - roles
              properties:
                username:
                  type: string
                password:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
        description: Register and get token
      responses:
        "200":
          description: Return jwt token
        "401":
          description: Bad auth
  /user/info/simple:
    get:
      summary: Get the smallest object that represents the current user
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.simple_user_info
      responses:
        "200":
          description: User info
        "401":
          description: Bad request
  /user/info:
    get:
      summary: Get an object that represents the current user
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.user_info
      responses:
        "200":
          description: User info
        "401":
          description: Bad request
    post:
      summary: Get an object that represents the requested user
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.any_user_info
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
              properties:
                username:
                  type: string
      responses:
        "200":
          description: Any user info based on username
        "401":
          description: Bad request
  /user/info/complex:
    get:
      summary: Get the combined object that represents the current user (user info with token info)
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.complex_user_info
      responses:
        "200":
          description: Get user object with token info
        "401":
          description: Bad request
  /user/update:
    put:
      summary: Update a user
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.update_user
      requestBody:
        content:
          application/json:
            schema:
              required:
                - id
              properties:
                id:
                  type: string
                username:
                  type: string
                password:
                  type: string
                enabled:
                  type: boolean
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
                attributes:
                  type: object
        description: Representation of a user
      responses:
        "200":
          description: User updated sucessfully
        "401":
          description: Bad request
  /user/delete:
    post:
      summary: Delete a user
      security:
        - jwt: [ ]
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              required:
                - id
              properties:
                id:
                  type: string
      operationId: app.delete_user
      responses:
        "200":
          description: Deleted user sucessfully.
        "401":
          description: Bad request.


  /role/create:
    post:
      summary: Create a role
      security:
        - jwt: [ ]
      tags:
        - Role
      operationId: app.create_role
      requestBody:
        content:
          application/json:
            schema:
              required:
                - role
              properties:
                role:
                  type: string
                attributes:
                  type: object
        description: Create role
      responses:
        "200":
          description: Created role successfully
        "401":
          description: Bad request
  /role:
    post:
      summary: Get Keycloak object of client role
      tags:
        - Role
      operationId: app.get_role
      requestBody:
        $ref: "#/components/requestBodies/app.user_contains_roleRoleBody"
      responses:
        "200":
          description: Get role
        "401":
          description: Bad request
  /role/all:
    get:
      summary: Get all client roles that exist in Keycloak
      tags:
        - Role
      operationId: app.get_roles
      responses:
        "200":
          description: List of all roles
        "401":
          description: Bad request
  /role/update:
    put:
      summary: Update a client role
      security:
        - jwt: [ ]
      tags:
        - Role
      operationId: app.update_role
      requestBody:
        content:
          application/json:
            schema:
              required:
                - role
                - attributes
              properties:
                role:
                  type: string
                attributes:
                  type: object
        description: Update role with given atributes
      responses:
        "200":
          description: Role updated sucessfully
        "401":
          description: Bad request
  /role/delete:
    post:
      summary: Delete a client role
      security:
        - jwt: [ ]
      tags:
        - Role
      operationId: app.delete_role
      requestBody:
        $ref: "#/components/requestBodies/app.user_contains_roleRoleBody"
      responses:
        "200":
          description: Role deleted sucessfully
        "401":
          description: Bad request
  /role/userContains:
    post:
      summary: Check whether the current user contains a specific client role
      security:
        - jwt: [ ]
      tags:
        - Role
      operationId: app.user_contains_role
      requestBody:
        $ref: "#/components/requestBodies/app.user_contains_roleRoleBody"
      responses:
        "200":
          description: Get True or False depending if user contains specified role
        "401":
          description: Bad request


components:
  requestBodies:
    app.user_contains_roleRoleBody:
      content:
        application/json:
          schema:
            required:
              - role
            properties:
              role:
                type: string
      description: Role

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-authentication-scheme: Bearer
      x-bearerInfoFunc: app._token_info