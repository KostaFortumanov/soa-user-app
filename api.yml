openapi: 3.0.0

info:
  title: Pet Shop Example API
  version: "1.0"
  description: Simple example API

paths:
  /auth:
    post:
      tags:
        - Authentication
      operationId: app.auth
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
        description: Login and get token
      responses:
        "200":
          description: Return jwt token
        "401":
          description: Bad auth
  /registerCustomer:
    post:
      tags:
        - User
      operationId: app.register_customer
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
        description: Register adn get token
      responses:
        "200":
          description: Return jwt token
        "401":
          description: Bad auth
  /registerEmployee:
    post:
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.register_employee
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
                - roles
              properties:
                username:
                  type: string
                password:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
        description: Register and get token
      responses:
        "200":
          description: Return jwt token
        "401":
          description: Bad auth
  /createRole:
    post:
      security:
        - jwt: [ ]
      tags:
        - Role
      operationId: app.create_role
      requestBody:
        content:
          application/json:
            schema:
              required:
                - role
              properties:
                role:
                  type: string
        description: Create role
      responses:
        "200":
          description: Create role
        "401":
          description: Bad request
  /userContainsRole:
    post:
      security:
        - jwt: [ ]
      tags:
        - Role
      operationId: app.user_contains_role
      requestBody:
        $ref: "#/components/requestBodies/app.user_contains_roleRoleBody"
      responses:
        "200":
          description: Create role
        "401":
          description: Bad request
  /getRole:
    post:
      security:
        - jwt: [ ]
      tags:
        - Role
      operationId: app.get_role
      requestBody:
        $ref: "#/components/requestBodies/app.user_contains_roleRoleBody"
      responses:
        "200":
          description: Get role
        "401":
          description: Bad request
  /userInfo:
    get:
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.user_info
      responses:
        "200":
          description: User info
        "401":
          description: Bad request
    post:
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.any_user_info
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
              properties:
                username:
                  type: string
      responses:
        "200":
          description: Any user info based on username
        "401":
          description: Bad request
  /tokenInfo:
    get:
      security:
        - jwt: [ ]
      tags:
        - Authentication
      operationId: app.token_info
      responses:
        "200":
          description: Token info
        "401":
          description: Bad request
  /refreshToken:
    post:
      tags:
        - Authentication
      operationId: app.refresh_token
      requestBody:
        $ref: "#/components/requestBodies/app.refresh_tokenRefreshTokenBody"
      responses:
        "200":
          description: Refresh token
        "401":
          description: Bad request
  /logout:
    post:
      security:
        - jwt: [ ]
      tags:
        - Authentication
      operationId: app.logout
      requestBody:
        $ref: "#/components/requestBodies/app.refresh_tokenRefreshTokenBody"
      responses:
        "200":
          description: Logout
        "401":
          description: Bad request
  /updateUser:
    post:
      security:
        - jwt: [ ]
      tags:
        - User
      operationId: app.update_user
      requestBody:
        content:
          application/json:
            schema:
              required:
                - id
              properties:
                id:
                  type: string
                username:
                  type: string
                password:
                  type: string
                enabled:
                  type: boolean
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                attributes:
                  type: object
        description: Representation of a user
      responses:
        "200":
          description: Successful update
        "401":
          description: Bad request

servers:
  - url: /api

components:
  requestBodies:
    app.user_contains_roleRoleBody:
      content:
        application/json:
          schema:
            required:
              - role
            properties:
              role:
                type: string
      description: Role
    app.refresh_tokenRefreshTokenBody:
      content:
        application/json:
          schema:
            required:
              - refreshToken
            properties:
              role:
                type: string
      description: Refresh Token
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-authentication-scheme: Bearer
      x-bearerInfoFunc: app._token_info